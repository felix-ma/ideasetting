<application>
  <component name="AppStorage">
    <histories>
      <item value="monolith" />
      <item value="is Isolated" />
      <item value="isIsolated" />
      <item value="Dummy Discovery Service" />
      <item value="specific" />
      <item value="In 2.6/3.1 this should not happen because all Rule Engine Queues will be in the DB and we always know their partition sizes." />
      <item value="Puts new message to queue for processing by the Root Rule Chain" />
      <item value="自定义" />
      <item value="app-springboot: SpringBoot Application ===================================================  Level: Beginner Technologies: SpringBoot, Spring MVC, Spring Security Summary: SpringBoot, Spring MVC, Spring Security Target Product: &lt;span&gt;Keycloak&lt;/span&gt; Source: &lt;https://github.com/keycloak/keycloak-quickstarts&gt;   What is it? -----------  The `app-springboot` quickstart demonstrates how to write a SpringBoot application that is secured with &lt;span&gt;Keycloak&lt;/span&gt;.  This application contains 2 pages :  * A public landing page. * A secured product page.  This application also show how to combine Spring Security with &lt;span&gt;Keycloak&lt;/span&gt;.   System Requirements -------------------  The quickstart requires that you have the [SpringBoot Service](../service-springboot/README.md) running. It assumes the services are located at `http://localhost:8081/products`. If the services are running elsewhere you need to edit `resources/application.properties` and replace the value of `product.service.url`.  All you need to build this project is Java 8.0 (Java SDK 1.8) or later and Maven 3.3.3 or later.   Configuration in &lt;span&gt;Keycloak&lt;/span&gt; -----------------------  Prior to running the quickstart you need to create a client in &lt;span&gt;Keycloak&lt;/span&gt; and download the installation file.  The following steps shows how to create the client required for this quickstart:  * Open the &lt;span&gt;Keycloak&lt;/span&gt; admin console * Select `Clients` from the menu * Click `Create` * Add the following values:   * Client ID: You choose (for example `app-springboot`)   * Client Protocol: `openid-connect`   * Root URL: URL to the application (for example `http://localhost:8080/app-springboot`) * Click `Save`  Once saved you need to change the `Access Type` to `public` and click save.  As an alternative you can create the client by importing the file [client-import.json](config/client-import.json).  If you deploy the application somewhere else change the hostname and port of the URLs accordingly.  Finally you need to update the adapter using SpringBoot's configuration file (application.properties) :  ```` server.compression.enabled: true server.compression.min-response-size: 1 server.connection-timeout=5000 server.port = 8080 keycloak.realm=springboot-quickstart keycloak.auth-server-url=http://localhost:8180/auth keycloak.ssl-required=external keycloak.resource=app-springboot keycloak.public-client=true  ````    Build and Run the Quickstart -------------------------------  1. Open a terminal and navigate to the root directory of this quickstart.  2. The following shows the command to deploy the quickstart:     ````    mvn spring-boot:run     ````  Access the Quickstart ---------------------  You can access the application with the following URL: &lt;http://localhost:8080/&gt;.  Integration test of the Quickstart ----------------------------------  1. Make sure you have an &lt;span&gt;Keycloak&lt;/span&gt; server running with an admin user in the `master` realm or use the provided docker image 2. Be sure to set the `TestHelper.keycloakBaseUrl` in the `createArchive` method (default URL is localhost:8180/auth). 3. Set accordingly the correct url for the `keycloak.auth-server-url` in the test [application.properties](src/test/resources/application.properties). 4. Maker sure the [service-springboot-rest](../service-springboot-rest) is running 4. Run `mvn test -Pspring-boot` " />
      <item value="app-springboot: SpringBoot Application&#10;===================================================&#10;&#10;Level: Beginner&#10;Technologies: SpringBoot, Spring MVC, Spring Security&#10;Summary: SpringBoot, Spring MVC, Spring Security&#10;Target Product: &lt;span&gt;Keycloak&lt;/span&gt;&#10;Source: &lt;https://github.com/keycloak/keycloak-quickstarts&gt;&#10;&#10;&#10;What is it?&#10;-----------&#10;&#10;The `app-springboot` quickstart demonstrates how to write a SpringBoot application that is secured with &lt;span&gt;Keycloak&lt;/span&gt;.&#10;&#10;This application contains 2 pages :&#10;&#10;* A public landing page.&#10;* A secured product page.&#10;&#10;This application also show how to combine Spring Security with &lt;span&gt;Keycloak&lt;/span&gt;.&#10;&#10;&#10;System Requirements&#10;-------------------&#10;&#10;The quickstart requires that you have the [SpringBoot Service](../service-springboot/README.md) running. It assumes the&#10;services are located at `http://localhost:8081/products`. If the services are running elsewhere you need to edit&#10;`resources/application.properties` and replace the value of `product.service.url`.&#10;&#10;All you need to build this project is Java 8.0 (Java SDK 1.8) or later and Maven 3.3.3 or later.&#10;&#10;&#10;Configuration in &lt;span&gt;Keycloak&lt;/span&gt;&#10;-----------------------&#10;&#10;Prior to running the quickstart you need to create a client in &lt;span&gt;Keycloak&lt;/span&gt; and download the installation file.&#10;&#10;The following steps shows how to create the client required for this quickstart:&#10;&#10;* Open the &lt;span&gt;Keycloak&lt;/span&gt; admin console&#10;* Select `Clients` from the menu&#10;* Click `Create`&#10;* Add the following values:&#10;  * Client ID: You choose (for example `app-springboot`)&#10;  * Client Protocol: `openid-connect`&#10;  * Root URL: URL to the application (for example `http://localhost:8080/app-springboot`)&#10;* Click `Save`&#10;&#10;Once saved you need to change the `Access Type` to `public` and click save.&#10;&#10;As an alternative you can create the client by importing the file [client-import.json](config/client-import.json).&#10;&#10;If you deploy the application somewhere else change the hostname and port of the URLs accordingly.&#10;&#10;Finally you need to update the adapter using SpringBoot's configuration file (application.properties) :&#10;&#10;````&#10;server.compression.enabled: true&#10;server.compression.min-response-size: 1&#10;server.connection-timeout=5000&#10;server.port = 8080&#10;keycloak.realm=springboot-quickstart&#10;keycloak.auth-server-url=http://localhost:8180/auth&#10;keycloak.ssl-required=external&#10;keycloak.resource=app-springboot&#10;keycloak.public-client=true&#10;&#10;````&#10;&#10;&#10;&#10;Build and Run the Quickstart&#10;-------------------------------&#10;&#10;1. Open a terminal and navigate to the root directory of this quickstart.&#10;&#10;2. The following shows the command to deploy the quickstart:&#10;&#10;   ````&#10;   mvn spring-boot:run&#10;&#10;   ````&#10;&#10;Access the Quickstart&#10;---------------------&#10;&#10;You can access the application with the following URL: &lt;http://localhost:8080/&gt;.&#10;&#10;Integration test of the Quickstart&#10;----------------------------------&#10;&#10;1. Make sure you have an &lt;span&gt;Keycloak&lt;/span&gt; server running with an admin user in the `master` realm or use the provided docker image&#10;2. Be sure to set the `TestHelper.keycloakBaseUrl` in the `createArchive` method (default URL is localhost:8180/auth).&#10;3. Set accordingly the correct url for the `keycloak.auth-server-url` in the test [application.properties](src/test/resources/application.properties).&#10;4. Maker sure the [service-springboot-rest](../service-springboot-rest) is running&#10;4. Run `mvn test -Pspring-boot`&#10;" />
      <item value="keycloak" />
      <item value="persist" />
      <item value="config Directive" />
      <item value="Parsable" />
      <item value="is Parsable" />
      <item value="Delays incoming message" />
      <item value="After successful transfer incoming message is automatically acknowledged. Queue name is configurable." />
      <item value="After acknowledgement, the message is pushed to related rule nodes. Useful if you don't care what happens to this message next." />
      <item value="was expecting double-quote to start field name" />
      <item value="Distances" />
      <item value="HttpMessageNotReadableException" />
      <item value="// Compact the collection, erase deleted data from disk and rebuild index in background (if         // the data size after compaction is still larger than indexFileSize). Data was only         // soft-deleted until you call compact." />
      <item value="// Compact the collection, erase deleted data from disk and rebuild index in background (if&#10;        // the data size after compaction is still larger than indexFileSize). Data was only&#10;        // soft-deleted until you call compact." />
      <item value="Helper function that normalizes a vector if you are using IP (Inner Product) as your metric" />
      <item value="Use the default PooledObject implementation." />
      <item value=" passivate" />
      <item value="passivate Object" />
      <item value="When an object is returned to the pool, clear the buffer." />
      <item value="This node should be used together with &quot;synchronization end&quot; node. This node will put messages into queue based on message originator id. Subsequent messages will not be processed until the previous message processing is completed or timeout event occurs. Size of the queue per originator and timeout values are configurable on a system level`" />
      <item value="This node should be used together with &quot;synchronization end&quot; node. This node will put messages into queue based on message originator id. Subsequent messages will not be processed until the previous message processing is completed or timeout event occurs. Size of the queue per originator and timeout values are configurable on a system level" />
      <item value="Synchronization Start/End nodes are deprecated since TB 2.5. Use queue with submit strategy SEQUENTIAL_BY_ORIGINATOR instead." />
      <item value="Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed" />
      <item value="This is very likely to create a memory leak" />
      <item value="manager" />
      <item value="manger" />
      <item value="tomorrow Data" />
      <item value="工厂" />
      <item value="Component Descriptor" />
      <item value="PARTITION CHANGE MSG" />
      <item value="SUSPENDED" />
      <item value="METHODS TO PROCESS THE MESSAGES" />
      <item value="This Service may be started for specific tenant only." />
      <item value="tenant" />
      <item value="Partition Change Event" />
      <item value="map' unexpected" />
      <item value="For profiles defined in the settings.xml, you are restricted to specifying only artifact repositories, plugin repositories, and free-form properties to be used as configuration variables for plugins in the POM." />
      <item value="company" />
      <item value="Periodic" />
      <item value="ORDERLY" />
      <item value="CONCURRENTLY" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="94" />
        <entry key="ENGLISH" value="95" />
        <entry key="ESTONIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190527000302182" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="phoneticFontFamily" value="Microsoft YaHei UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>