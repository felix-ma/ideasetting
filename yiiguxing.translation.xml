<application>
  <component name="AppStorage">
    <histories>
      <item value="No matter how we complete, make sure the entry in pending is removed. This covers the case where the request fails due to a timeout in the transport layer as well as normal completion." />
      <item value="on Secure Message" />
      <item value="onSecureMessage" />
      <item value="IMPORTANT: client handle must be unique per item within the context of a subscription. You are not required to use the UaSubscription's client handle sequence; it is provided as a convenience. Your application is free to assign client handles by whatever means necessary." />
      <item value="完成" />
      <item value="高度" />
      <item value="噶偶的" />
      <item value="Telemetry" />
      <item value="已登录" />
      <item value="loaned" />
      <item value="Delivery Future" />
      <item value="diagram" />
      <item value="Marshalling Decoder" />
      <item value="默认" />
      <item value="字段定义" />
      <item value="字段" />
      <item value="计算" />
      <item value="Heard Beat " />
      <item value="HeardBeatMsg" />
      <item value="the radix to be used while parsing " />
      <item value="ensure Capacity" />
      <item value="/**&#10;     * Sets the specified 16-bit short integer in the Little Endian Byte&#10;     * Order at the current {@code writerIndex} and increases the&#10;     * {@code writerIndex} by {@code 2} in this buffer.&#10;     * The 16 high-order bits of the specified value are ignored.&#10;     * If {@code this.writableBytes} is less than {@code 2}, {@link #ensureWritable(int)}&#10;     * will be called in an attempt to expand capacity to accommodate.&#10;     */" />
      <item value="/**&#10;     * Sets the specified 16-bit short integer at the current&#10;     * {@code writerIndex} and increases the {@code writerIndex} by {@code 2}&#10;     * in this buffer.  The 16 high-order bits of the specified value are ignored.&#10;     * If {@code this.writableBytes} is less than {@code 2}, {@link #ensureWritable(int)}&#10;     * will be called in an attempt to expand capacity to accommodate.&#10;     */" />
      <item value="**&#10;     * Sets the specified 16-bit short integer at the current&#10;     * {@code writerIndex} and increases the {@code writerIndex} by {@code 2}&#10;     * in this buffer.  The 16 high-order bits of the specified value are ignored.&#10;     * If {@code this.writableBytes} is less than {@code 2}, {@link #ensureWritable(int)}&#10;     * will be called in an attempt to expand capacity to accommodate.&#10;     */" />
      <item value="Sets" />
      <item value="write Short LE" />
      <item value="线路编码" />
      <item value="局编码" />
      <item value="帧类型" />
      <item value="监测类型" />
      <item value="序号" />
      <item value="protocol" />
      <item value="NO MORE PARTITIONS FOR CURRENT KEY" />
      <item value="replace null callbacks with callbacks from websocket service." />
      <item value="monolith" />
      <item value="is Isolated" />
      <item value="isIsolated" />
      <item value="Dummy Discovery Service" />
      <item value="specific" />
      <item value="In 2.6/3.1 this should not happen because all Rule Engine Queues will be in the DB and we always know their partition sizes." />
      <item value="Puts new message to queue for processing by the Root Rule Chain" />
      <item value="自定义" />
      <item value="app-springboot: SpringBoot Application ===================================================  Level: Beginner Technologies: SpringBoot, Spring MVC, Spring Security Summary: SpringBoot, Spring MVC, Spring Security Target Product: &lt;span&gt;Keycloak&lt;/span&gt; Source: &lt;https://github.com/keycloak/keycloak-quickstarts&gt;   What is it? -----------  The `app-springboot` quickstart demonstrates how to write a SpringBoot application that is secured with &lt;span&gt;Keycloak&lt;/span&gt;.  This application contains 2 pages :  * A public landing page. * A secured product page.  This application also show how to combine Spring Security with &lt;span&gt;Keycloak&lt;/span&gt;.   System Requirements -------------------  The quickstart requires that you have the [SpringBoot Service](../service-springboot/README.md) running. It assumes the services are located at `http://localhost:8081/products`. If the services are running elsewhere you need to edit `resources/application.properties` and replace the value of `product.service.url`.  All you need to build this project is Java 8.0 (Java SDK 1.8) or later and Maven 3.3.3 or later.   Configuration in &lt;span&gt;Keycloak&lt;/span&gt; -----------------------  Prior to running the quickstart you need to create a client in &lt;span&gt;Keycloak&lt;/span&gt; and download the installation file.  The following steps shows how to create the client required for this quickstart:  * Open the &lt;span&gt;Keycloak&lt;/span&gt; admin console * Select `Clients` from the menu * Click `Create` * Add the following values:   * Client ID: You choose (for example `app-springboot`)   * Client Protocol: `openid-connect`   * Root URL: URL to the application (for example `http://localhost:8080/app-springboot`) * Click `Save`  Once saved you need to change the `Access Type` to `public` and click save.  As an alternative you can create the client by importing the file [client-import.json](config/client-import.json).  If you deploy the application somewhere else change the hostname and port of the URLs accordingly.  Finally you need to update the adapter using SpringBoot's configuration file (application.properties) :  ```` server.compression.enabled: true server.compression.min-response-size: 1 server.connection-timeout=5000 server.port = 8080 keycloak.realm=springboot-quickstart keycloak.auth-server-url=http://localhost:8180/auth keycloak.ssl-required=external keycloak.resource=app-springboot keycloak.public-client=true  ````    Build and Run the Quickstart -------------------------------  1. Open a terminal and navigate to the root directory of this quickstart.  2. The following shows the command to deploy the quickstart:     ````    mvn spring-boot:run     ````  Access the Quickstart ---------------------  You can access the application with the following URL: &lt;http://localhost:8080/&gt;.  Integration test of the Quickstart ----------------------------------  1. Make sure you have an &lt;span&gt;Keycloak&lt;/span&gt; server running with an admin user in the `master` realm or use the provided docker image 2. Be sure to set the `TestHelper.keycloakBaseUrl` in the `createArchive` method (default URL is localhost:8180/auth). 3. Set accordingly the correct url for the `keycloak.auth-server-url` in the test [application.properties](src/test/resources/application.properties). 4. Maker sure the [service-springboot-rest](../service-springboot-rest) is running 4. Run `mvn test -Pspring-boot` " />
      <item value="app-springboot: SpringBoot Application&#10;===================================================&#10;&#10;Level: Beginner&#10;Technologies: SpringBoot, Spring MVC, Spring Security&#10;Summary: SpringBoot, Spring MVC, Spring Security&#10;Target Product: &lt;span&gt;Keycloak&lt;/span&gt;&#10;Source: &lt;https://github.com/keycloak/keycloak-quickstarts&gt;&#10;&#10;&#10;What is it?&#10;-----------&#10;&#10;The `app-springboot` quickstart demonstrates how to write a SpringBoot application that is secured with &lt;span&gt;Keycloak&lt;/span&gt;.&#10;&#10;This application contains 2 pages :&#10;&#10;* A public landing page.&#10;* A secured product page.&#10;&#10;This application also show how to combine Spring Security with &lt;span&gt;Keycloak&lt;/span&gt;.&#10;&#10;&#10;System Requirements&#10;-------------------&#10;&#10;The quickstart requires that you have the [SpringBoot Service](../service-springboot/README.md) running. It assumes the&#10;services are located at `http://localhost:8081/products`. If the services are running elsewhere you need to edit&#10;`resources/application.properties` and replace the value of `product.service.url`.&#10;&#10;All you need to build this project is Java 8.0 (Java SDK 1.8) or later and Maven 3.3.3 or later.&#10;&#10;&#10;Configuration in &lt;span&gt;Keycloak&lt;/span&gt;&#10;-----------------------&#10;&#10;Prior to running the quickstart you need to create a client in &lt;span&gt;Keycloak&lt;/span&gt; and download the installation file.&#10;&#10;The following steps shows how to create the client required for this quickstart:&#10;&#10;* Open the &lt;span&gt;Keycloak&lt;/span&gt; admin console&#10;* Select `Clients` from the menu&#10;* Click `Create`&#10;* Add the following values:&#10;  * Client ID: You choose (for example `app-springboot`)&#10;  * Client Protocol: `openid-connect`&#10;  * Root URL: URL to the application (for example `http://localhost:8080/app-springboot`)&#10;* Click `Save`&#10;&#10;Once saved you need to change the `Access Type` to `public` and click save.&#10;&#10;As an alternative you can create the client by importing the file [client-import.json](config/client-import.json).&#10;&#10;If you deploy the application somewhere else change the hostname and port of the URLs accordingly.&#10;&#10;Finally you need to update the adapter using SpringBoot's configuration file (application.properties) :&#10;&#10;````&#10;server.compression.enabled: true&#10;server.compression.min-response-size: 1&#10;server.connection-timeout=5000&#10;server.port = 8080&#10;keycloak.realm=springboot-quickstart&#10;keycloak.auth-server-url=http://localhost:8180/auth&#10;keycloak.ssl-required=external&#10;keycloak.resource=app-springboot&#10;keycloak.public-client=true&#10;&#10;````&#10;&#10;&#10;&#10;Build and Run the Quickstart&#10;-------------------------------&#10;&#10;1. Open a terminal and navigate to the root directory of this quickstart.&#10;&#10;2. The following shows the command to deploy the quickstart:&#10;&#10;   ````&#10;   mvn spring-boot:run&#10;&#10;   ````&#10;&#10;Access the Quickstart&#10;---------------------&#10;&#10;You can access the application with the following URL: &lt;http://localhost:8080/&gt;.&#10;&#10;Integration test of the Quickstart&#10;----------------------------------&#10;&#10;1. Make sure you have an &lt;span&gt;Keycloak&lt;/span&gt; server running with an admin user in the `master` realm or use the provided docker image&#10;2. Be sure to set the `TestHelper.keycloakBaseUrl` in the `createArchive` method (default URL is localhost:8180/auth).&#10;3. Set accordingly the correct url for the `keycloak.auth-server-url` in the test [application.properties](src/test/resources/application.properties).&#10;4. Maker sure the [service-springboot-rest](../service-springboot-rest) is running&#10;4. Run `mvn test -Pspring-boot`&#10;" />
      <item value="keycloak" />
      <item value="persist" />
      <item value="config Directive" />
      <item value="Parsable" />
      <item value="is Parsable" />
      <item value="Delays incoming message" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="113" />
        <entry key="ENGLISH" value="113" />
        <entry key="ESTONIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190527000302182" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Microsoft YaHei UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>